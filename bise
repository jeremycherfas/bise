#!/usr/bin/env perl

use Modern::Perl;

use File::ReadBackwards;
use File::Temp;
use Apache::Log::Parser;
use DateTime;
use PerlIO::gzip;
use Path::Class::File;
use DateTime::Format::Strptime;
use YAML qw(LoadFile);
use FindBin;

use Readonly;

Readonly my $DEFAULT_REGULAR_INTERVAL_DAYS => 1;
Readonly my $DEFAULT_DATE_FORMAT => '%B %d';

my $config_ref = LoadFile( "$FindBin::Bin/conf/conf.yaml" );
$config_ref->{ regular_interval_days } ||= $DEFAULT_REGULAR_INTERVAL_DAYS;
$config_ref->{ date_format } ||= $DEFAULT_DATE_FORMAT;

my @reports;
foreach ( @{ $config_ref->{ reports } } ) {
    push @reports, { config => $_ };
}

my @log_files = sort {
    if ( $a =~ /log$/ ) {
        return -1;
    }
    elsif ( $b =~ /log$/ ) {
        return 1;
    }
    my ($a_digit, $b_digit);
    ($a_digit) = $a =~ /log.(\d+)/;
    ($b_digit) = $b =~ /log.(\d+)/;

    return $a_digit <=> $b_digit;
} @ARGV;

my $now = DateTime->now;
my $two_weeks_ago = $now->clone->subtract( days => 14 );

my $parser = Apache::Log::Parser->new (fast => 1);
my $strp = DateTime::Format::Strptime->new( pattern => '%d/%b/%Y:%H:%M:%S %z' );

my $done_reading = 0;
for my $log_filename (@log_files) {
    last if $done_reading;
    process_log_file( $log_filename );
}

for my $report (@reports) {
    my $total = 0;
    my $regular_total = 0;
    my $hits_ref = $report->{hits};
    for my $ip (keys %$hits_ref ) {
        $total += $$hits_ref{$ip}{count};
        if ( int($$hits_ref{$ip}{latest}->subtract_datetime_absolute($$hits_ref{$ip}{earliest})->seconds / 62400 ) >= $config_ref->{regular_interval_days} ) {
        	$regular_total += $$hits_ref{$ip}{count};
        }
    }
    $report->{total} = $total;
    $report->{regular_total} = $regular_total;

}

my ($header, $uniques, $regulars);

say $two_weeks_ago->strftime($config_ref->{date_format}) . ' - ' . $now->strftime($config_ref->{date_format});
format STDOUT_TOP =
Source                 Uniques Regulars
---------------------------------------
.
format STDOUT =
@<<<<<<<<<<<<<<<<<<< @>>>>>>>> @>>>>>>>
$header,             $uniques, $regulars
.

foreach ( @reports ) { report_line($_) }

sub report_line {
    my ($report) = @_;
    $header = $report->{config}{label};
    $uniques = $report->{total};
    $regulars = $report->{regular_total};
    write;
}

sub process_log_file {
    my ( $log_filename ) = @_;

    my $log_file = Path::Class::File->new( $log_filename );
    if ($log_file =~ /gz$/) {
        my $temp_file = File::Temp->new;
        print $temp_file $log_file->slurp( iomode => '<:gzip' );
        $log_file = $temp_file;
    }
    my $fh = File::ReadBackwards->new( $log_file );

    while ( my $line = $fh->readline ) {
        my $log = $parser->parse( $line );
        next unless $log->{status} && $log->{status} < 400;
        my $time = $strp->parse_datetime( $log->{datetime} );
        if ( $time < $two_weeks_ago ) {
            $done_reading = 1;
            last;
        }

        my $agent = $log->{agent};
        my $ip    = $log->{rhost};
        my $path  = $log->{path};
        my $referer = $log->{referer};

        # If it says it's a bot, trust it.
        next if $agent =~ /bot\b/i;

        # Ignore unhelpful aggregators.
        next if $agent =~ /Digg Feed Fetcher/;
        next if $agent =~ /Feedly/;

        # Determine the number of readers this line represents.
        my $reader_count = 1;
        if ($agent =~ /\b(\d+) (subscriber|reader)/) {
            $reader_count = $1;
        }

        # Run through all our reports' tests.
        for my $report (@reports) {
            my $matched = 0;
            my %report_config = %{ $report->{config} };
            if ($report_config{test_type} eq 'path_regex' ) {
                $matched = 1 if $path =~ /$report_config{test}/;
            }
            elsif ( $report_config{test_type} eq 'path' ) {
                $matched = 1 if $path eq $report_config{test};
            }
            elsif ( $report_config{test_type} eq 'referer_regex' ) {
                $matched = 1 if $referer =~ /$report_config{test}/;
            }
            elsif ( $report_config{test_type} eq 'agent_regex' ) {
                $matched = 1 if $agent =~ /$report_config{test}/;
            }

            if ( $matched ) {
                unless ($report->{hits}{$ip} ) {
                	$report->{hits}{$ip}{latest} = $time;
                }
                $report->{hits}{$ip}{earliest} = $time;
                $report->{hits}{$ip}{count} = $reader_count;
            }
        }
    }
}
